cmake_minimum_required(VERSION 3.10)

# Instruct our compiler that we want to use C++ 17 and use exceptions.
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17 -fexceptions")

# Determine what build type we are in, shifted to lower case (debug or release).
string(TOLOWER ${CMAKE_BUILD_TYPE} BUILD_VARIANT_DIR)

# Location of our third party libraries.
set(LIBS "../../submodules")
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH})

set(SDL_DIR "sdl/jni/SDL")
set(SDL_MIXER_DIR "sdl/jni//SDL_mixer")
set(SDL_NET_DIR "${LIBS}/SDL_net")
set(SDL_IMAGE_DIR "sdl/jni/SDL_image")
set(FREETYPE_DIR "${LIBS}/freetype")
set(GLM_DIR "${LIBS}/glm")

set(MAIN_SOURCE_DIR "../../engine")
set(SANDBOX_SOURCE_DIR "../../sandbox")

set(EXTERNAL_STB "../../engine/include/stb")
set(EXTERNAL_IMGUI "../../libs/imgui")

# Location of the .so files generated by the 'sdl' module.
set(SDL_SO_DIR "${CMAKE_SOURCE_DIR}/sdl/build/intermediates/ndkBuild/${BUILD_VARIANT_DIR}/lib/${ANDROID_ABI}")

# This is the main SDL library target, we will name it 'sdl2'.
add_library(
        sdl2
        SHARED
        IMPORTED
)

add_library(
        sdl2_mixer
        SHARED
        IMPORTED
)

add_library(
        sdl2_net
        SHARED
        IMPORTED
)

add_library(
        sdl2_image
        SHARED
        IMPORTED
)

add_library(
        mpg123
        SHARED
        IMPORTED
)


# This is the built in NDK logging library
find_library(log-lib log)
add_subdirectory(freetype/freetype)
add_subdirectory(glm/glm)

set_target_properties(
        sdl2
        PROPERTIES
        IMPORTED_LOCATION
        ${SDL_SO_DIR}/libSDL2.so
)

set_target_properties(
        sdl2_mixer
        PROPERTIES
        IMPORTED_LOCATION
        ${SDL_SO_DIR}/libSDL2_mixer.so
)

set_target_properties(
        sdl2_net
        PROPERTIES
        IMPORTED_LOCATION
        ${SDL_SO_DIR}/libSDL2_net.so
)

set_target_properties(
        sdl2_image
        PROPERTIES
        IMPORTED_LOCATION
        ${SDL_SO_DIR}/libSDL2_image.so
)

set_target_properties(
        mpg123
        PROPERTIES
        IMPORTED_LOCATION
        ${SDL_SO_DIR}/libmpg123.so
)


# We will tell our build system where to look for third party header files.
include_directories(${SDL_DIR}/include)
include_directories(${SDL_MIXER_DIR}/include)
include_directories(${SDL_NET_DIR}/include)
include_directories(${SDL_IMAGE_DIR})
include_directories(${FREETYPE_DIR}/include)
include_directories(${GLM_DIR})
include_directories(${MAIN_SOURCE_DIR}/include)
include_directories(${SANDBOX_SOURCE_DIR})
include_directories(${EXTERNAL_STB})
include_directories(.)

# We will recursively collate all .hpp header and .cpp source files under the main source directory as the input for the compilation.
file(GLOB_RECURSE CPP_HEADERS ${MAIN_SOURCE_DIR}/include/*.h*  ${SANDBOX_SOURCE_DIR}/*.h*)
file(GLOB_RECURSE CPP_SOURCES ${MAIN_SOURCE_DIR}/src/*.cpp   ${SANDBOX_SOURCE_DIR}/*.cpp)

set(GL_PROFILES "GL_PROFILE_GLES2" "GL_PROFILE_GLES3")

set(TARGET_LIBRARIES
        sdl2
        sdl2_mixer
        sdl2_net
        sdl2_image
        mpg123
        freetype
        glm
        ${log-lib}
        GLESv3
        EGL
    )

#GDEFirebase

add_library(
        android
        SHARED
        ${CPP_HEADERS}
        ${CPP_SOURCES}
)

# Finally, we need to link all the libraries we want to use in our project together, remembering that the 'a-simple-triangle' library is in fact our own C++ code. Note also we are including the 'GLESv2' library for OpenGL ES2 support, though we don't need to define it ourselves with the 'add_library' commands.
target_link_libraries(
        android
        ${TARGET_LIBRARIES}
)

target_compile_definitions(android PRIVATE ${GL_PROFILES})
